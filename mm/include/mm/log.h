#ifndef MM_LOG_H
#define MM_LOG_H
#include <stdarg.h>
#include "mm/common.h"

#if MM_GCC_HAS_INCLUDE( <syslog.h> )
#define _BSD_SOURCE
#include <syslog.h>
#define MM_USING_SYSLOG
#endif

#ifdef MM_USING_SYSLOG
typedef enum mm_log_facility {
	MM_DAEMON = LOG_DAEMON,
	MM_USER = LOG_USER
} mm_log_facility_t;

typedef enum mm_log_level {
	MM_INFO = LOG_INFO,
	MM_WARN = LOG_WARNING,
	MM_ERR = LOG_ERR,
	MM_CRIT = LOG_CRIT
} mm_log_level_t;
#else

/*! \file */

/*!
	\brief Log facility passed to openlog ( does nothing on non posix platforms ).
*/
typedef enum mm_log_facility {
	MM_DAEMON = 1, //!< Logs were generated by a daemon.
	MM_USER //!< Logs were generated by a user.
} mm_log_facility_t;

/*!
	\brief Log level ( level of severity ) passed to syslog.
*/
typedef enum mm_log_level {
	MM_INFO = 1, //!< stdout
	MM_WARN, //!< stderr
	MM_ERR, //!< stderr
	MM_CRIT //!< stderr
} mm_log_level_t;
#endif

/*!
	\brief Initialize syslog ( does nothing on non posix platforms )
	\param name passed to openlog
	\param facility type of entity producing logs
*/
MM_API void mm_openlog( const char *name, enum mm_log_facility facility );

/*!
	\brief Close syslog ( does nothing on non posix platforms )
*/
MM_API void mm_closelog( void );

/*!
	\brief log to stdout/stderr and syslog using stdarg.

	The last two arguments of this function are used the same as vprintf.
	\param level severity level of log. See mm_log_level_t.
	\param format format of message to print out.
	\param args variable arguments to present in format.
*/
MM_API void mm_vlog( enum mm_log_level level, const char *format, va_list args );

/*!
	\brief log to stdout/stderr and syslog

	The last two arguments of this function are used the same as printf.
	\param level severity level of log. See mm_log_level_t.
	\param format format of message to print out.
	\param ... variable arguments to present in format.
*/

MM_API void mm_log( enum mm_log_level level, const char *format, ... );

#ifdef MM_DEBUG
#define MM_DEBUG_VLOG( level, format, args) mm_vlog( level, format, args )
#define MM_DEBUG_LOG( level, ... ) mm_log( level, __VA_ARGS__ )
#else
/*!
	\brief Wrapper for mm_vlog that is only defined in debug builds
*/
#define MM_DEBUG_VLOG( level, format, args )

/*!
	\brief Wrapper for mm_log that is only defined in debug builds
*/
#define MM_DEBUG_LOG( level, ... )
#endif

#endif
